struct TrieNode {
    TrieNode* children[26] = {};  
    int count = 0;
};

class Solution {
public:
    vector<int> sumPrefixScores(vector<string>& words) {
        TrieNode* root = new TrieNode();
        vector<int> ans;

        for (const string& word : words)
            insert(root, word);

        for (const string& word : words)
            ans.push_back(getScore(root, word));

        deleteTrie(root);
        return ans;
    }

private:
    void insert(TrieNode* root, const string& word) {
        TrieNode* node = root;
        for (const char c : word) {
            int i = c - 'a';
            if (!node->children[i]) 
                node->children[i] = new TrieNode();
            node = node->children[i];
            ++node->count;
        }
    }

    int getScore(TrieNode* root, const string& word) {
        TrieNode* node = root;
        int score = 0;
        for (const char c : word) {
            node = node->children[c - 'a'];
            score += node->count;
        }
        return score;
    }

    void deleteTrie(TrieNode* node) {
        if (!node) return;
        for (int i = 0; i < 26; ++i)
            deleteTrie(node->children[i]);
        delete node;
    }
};
