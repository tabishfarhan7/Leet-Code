class Solution {
 public:
  long long countGoodIntegers(int n, int k) {
    int halfLength = (n + 1) / 2;
    int minHalf = pow(10, halfLength - 1);
    int maxHalf = pow(10, halfLength);
    long long ans = 0;
    unordered_set<string> seen;

    for (int num = minHalf; num < maxHalf; ++num) {
      string firstHalf = to_string(num);
      string secondHalf = {firstHalf.rbegin(), firstHalf.rend()};
      string palindrome = firstHalf + secondHalf.substr(n % 2);

      if (stol(palindrome) % k != 0)
        continue;

      string sortedDigits = palindrome;
      sort(sortedDigits.begin(), sortedDigits.end());
      if (seen.count(sortedDigits))
        continue;
      seen.insert(sortedDigits);

      vector<int> digitCount(10);
      for (char c : palindrome)
        ++digitCount[c - '0'];

      int firstDigitChoices = n - digitCount[0];
      long long permutations = firstDigitChoices * factorial(n - 1);

      for (int freq : digitCount)
        if (freq > 1)
          permutations /= factorial(freq);

      ans += permutations;
    }

    return ans;
  }

 private:
  long long factorial(int n) {
    if (n <= 1) return 1;
    long long res = 1;
    for (int i = 2; i <= n; ++i)
      res *= i;
    return res;
  }
};
